// Generated by CoffeeScript 1.3.3
(function() {
  var DomDecor, U, uQuery,
    __slice = [].slice;

  DomDecor = (function() {

    function DomDecor(arg) {
      this.els = !arg || arg.length === 0 ? [] : (arg.length ? arg : [arg]);
      this.el = this.els[0];
      this.length = this.els.length;
    }

    DomDecor.prototype.each = function(f) {
      var el, i, _ref, _results;
      _ref = this.els;
      _results = [];
      for (i in _ref) {
        el = _ref[i];
        _results.push(f.apply(el, [el, i]));
      }
      return _results;
    };

    DomDecor.prototype.remove = function() {
      this.each(function() {
        return this.parentNode.removeChild(this);
      });
      this.els = [];
      this.el = void 0;
      return this;
    };

    DomDecor.prototype.filter = function(f) {
      var el;
      return U((function() {
        var _i, _len, _ref, _results;
        _ref = this.els;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          if (f.apply(el)) {
            _results.push(el);
          }
        }
        return _results;
      }).call(this));
    };

    DomDecor.prototype.get = function(n) {
      return this.els[n];
    };

    DomDecor.prototype.eq = function(n) {
      return U(this.get(n));
    };

    DomDecor.prototype.index = function(o) {
      o = o.el || o;
      return this.els.indexOf(o);
    };

    DomDecor.prototype.add = function(o) {
      var _ref;
      console.log(this.els.length, o.els.length);
      this.els = this.els.concat((_ref = o.els) != null ? _ref : o);
      this.el = this.els[0];
      return this.length = this.els.length;
    };

    return DomDecor;

  })();

  window.uQuery = uQuery = U = function(a, n) {
    var e, el, m, u, _i, _len;
    if (n == null) {
      n = document;
    }
    if (typeof a === 'string') {
      m = a.match(/^(\w+|)([#\.]\w+|)(.*)$/);
      m[1] = m[1].toUpperCase();
      console.log(m, 'in', n.className, n.id);
      e = [];
      if (m[2]) {
        if (m[2][0] === '#') {
          e = [document.getElementById(m[2].slice(1))];
        } else if (m[2][0] === '.') {
          e = n.getElementsByClassName(m[2].slice(1));
        }
      }
      if (m[1]) {
        if (m[2]) {
          if (e) {
            e = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = e.length; _i < _len; _i++) {
                el = e[_i];
                if (el.tagName === m[1]) {
                  _results.push(el);
                }
              }
              return _results;
            })();
          }
        } else {
          e = n.getElementsByTagName(m[1]);
        }
      }
      if (m[3]) {
        u = U([]);
        console.log(e);
        for (_i = 0, _len = e.length; _i < _len; _i++) {
          el = e[_i];
          console.log('getting children of', el.className, el.id);
          console.log((U(m[3].slice(1), el)).length);
          u.add(U(m[3].slice(1), el));
        }
        console.log(u.length);
        return u;
      }
    } else {
      e = a.els || a;
    }
    return new DomDecor(e);
  };

  U.extend = function() {
    var a, i, k, v, _base, _ref, _ref1, _results;
    a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    i = a.length;
    _results = [];
    while (i) {
      _ref = a[i];
      for (k in _ref) {
        v = _ref[k];
        if ((_ref1 = (_base = a[0])[k]) == null) {
          _base[k] = a[i][k];
        }
      }
      _results.push(i -= 1);
    }
    return _results;
  };

}).call(this);
